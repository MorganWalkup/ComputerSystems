
AVRASM ver. 2.2.6  C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm Thu Mar 30 09:26:55 2017

[builtin](2): Including file 'C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\m328pdef.inc'
[builtin](2): Including file 'C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\m328pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; CSProject.asm
                                 ;
                                 ; Created: 2/27/2017 1:48:32 PM
                                 ; Author : Morgan Walkup
                                 ;
                                 
000000 c008                      RJMP INITIALIZE 			; Jump to INITIALIZE
000001 c007                      RJMP INITIALIZE				; Jump to INITIALIZE
000002 c006                      RJMP INITIALIZE				; Jump to INITIALIZE
000003 c005                      RJMP INITIALIZE				; Jump to INITIALIZE
000004 c004                      RJMP INITIALIZE				; Jump to INITIALIZE
000005 c003                      RJMP INITIALIZE				; Jump to INITIALIZE
000006 c002                      RJMP INITIALIZE				; Jump to INITIALIZE
000007 c001                      RJMP INITIALIZE				; Jump to INITIALIZE
000008 c0ee                      RJMP PCINT					; Jump to PCINT routine
                                 
                                 ;==================================================================================
                                 ; INITIALIZE
                                 ;==================================================================================
                                 INITIALIZE:
                                 	; Initialize registers
000009 ef1f                      	LDI R17, 0xFF			; Load 0xFF into R17
00000a b914                      	OUT DDRB, R17			; Set PORTB as output
00000b b91a                      	OUT DDRD, R17			; Set PORTD as output
00000c e010                      	LDI R17, 0x00			; Load 0x00 into R17
00000d b917                      	OUT DDRC, R17			; Set PORTC as input
00000e 2788                      	CLR R24					; Clear SHIFT Register
00000f 27aa                      	CLR R26					; Clear MODE Register
000010 2733                      	CLR R19					; Clear LaserTemp Register
000011 2411                      	CLR R1					; Clear Char1L Register
000012 2422                      	CLR R2					; Clear Char1H Register
000013 2433                      	CLR R3					; Clear Char2L Register
000014 2444                      	CLR R4					; Clear Char2H Register
000015 2455                      	CLR R5					; Clear Char3L Register 
000016 2466                      	CLR R6					; Clear Char3H Register
000017 2477                      	CLR R7					; Clear Char4L Register
000018 2488                      	CLR R8					; Clear Char4H Register
000019 982d                      	CBI PORTB, 5			; Clear laser control pin (laser off)
                                 
                                 	; Set up Potentiometer
00001a e205                      	LDI R16, 0x25
00001b 93b0 007c                 	STS ADMUX, R27
                                 
00001d ee02                      	LDI R16, 0xE2
00001e 93b0 007a                 	STS ADCSRA, R27
                                 
000020 e000                      	LDI R16, 0x00
000021 93b0 007b                 	STS ADCSRB, R27
                                 
                                 	; Set up LCD
000023 9a2b                      	SBI PORTB, 3			; Set PortB, bit 3 to select LCD
000024 9a2c                      	SBI PORTB, 4			; Set PortB, bit 4 to select LCD
000025 9828                      	CBI PORTB, 0			; Select Register 0 of the display
                                 
000026 e001                      	LDI R16, 0x01			; Load 0x01 into R16 (Clear Display)
000027 d069                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine to output this command to the display
                                 
000028 e300                      	LDI R16, 0x30			; Load 0x30 into R16 
000029 d067                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
00002a e008                      	LDI R16, 0x08			; Load 0x08 into R16
00002b d065                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
00002c e006                      	LDI R16, 0x06			; Load 0x06 into R16
00002d d063                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
00002e e30c                      	LDI R16, 0x3C			; Load 0x3C into R16
00002f d061                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
000030 e00f                      	LDI R16, 0x0F			; Load 0x0F into R16 (Turns on Display and Cursor Blink)
000031 d05f                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
000032 e002                      	LDI R16, 0x02			; Load 0x02 into R16 (Cursor Home)
000033 d05d                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
                                 	; Set up pin change interrupts
000034 9478                      	SEI						; Enable external interrrupts
000035 e012                      	LDI R17, 0x02			; Loads 2 into register 17
000036 9310 0068                 	STS 0x68, R17			; Store R17's value into memory to enable pcint
000038 e210                      	LDI R17, 0x20			; Loads 0x20 into R17
000039 9310 006c                 	STS 0x6C, R17			; Store R17's value into memory to enable pcint
                                 
                                 PIAINIT:
                                 	; Select PIA
00003b 982b                      	CBI PORTB, 3			; Clear PortB, bit 3 to select PIA
00003c 982c                      	CBI PORTB, 4			; Clear PortB, bit 4 to select PIA
                                 
                                 	; Set Bit 2 of CRA to 0
00003d 9829                      	CBI PORTB, 1			; Clear RS1 to select CRA
00003e 9a28                      	SBI PORTB, 0			; Set RS0 to select CRA with previous line
00003f e020                      	LDI R18, 0x00			; Clears CRA bit 2, to access DDRA
000040 b92b                      	OUT PORTD, R18			; Writes the data to the PIA
000041 d083                      	RCALL EXEC				; Execute Instruction
                                 	; Set DDRA to 0xFF
000042 9828                      	CBI PORTB, 0			; Clears RS0 select DDRA
000043 ef2f                      	LDI R18, 0xFF			; Sets DDRA to output
000044 b92b                      	OUT PORTD, R18			; Writes the data to the PIA
000045 d07f                      	RCALL EXEC				; Execute Instruction
                                 	; Set bit 2 of CRA to 1
000046 9a28                      	SBI PORTB, 0			; Set RS0 to select CRA again
000047 e024                      	LDI R18, 0x04			; Sets CRA bit 2, to access DRA
000048 b92b                      	OUT PORTD, R18			; Writes the data to the PIA
000049 d07b                      	RCALL EXEC				; Execute Instruction
                                 
                                 	; Set bit 2 of CRB to 0
00004a 9a29                      	SBI PORTB, 1			; Set RS1 to select CRB
00004b 9a28                      	SBI PORTB, 0			; Set RSO to select CRB with previous line
00004c e020                      	LDI R18, 0x00			; Clears CRB bit 2, to access DDRB
00004d b92b                      	OUT PORTD, R18			; Writes the data to the PIA
00004e d076                      	RCALL EXEC				; Execute Instruction
                                 	; Set DDRB to 0xFF
00004f 9828                      	CBI PORTB, 0			; Clears RS0 to select DDRB
000050 ef2f                      	LDI R18, 0xFF			; Sets DDRB to output
000051 b92b                      	OUT PORTD, R18			; Writes the data to the PIA
000052 d072                      	RCALL EXEC				; Execute Instruction
                                 	; Set bit 2 of CRB to 1
000053 9a28                      	SBI PORTB, 0			; Set RS0 to select CRB again
000054 e024                      	LDI R18, 0x04			; Set bit 2 of CRB to select DRB
000055 b92b                      	OUT PORTD, R18			; Writes the data to the PIA
000056 d06e                      	RCALL EXEC				; Execute Instruction
                                 
                                 LASERCHARINIT:
                                 	; Initialize Laser Character Registers
000057 e430                      	LDI R19, high(TABLEBLANK*2) ; Load TABLEA beginning address into R19  
000058 2e23                      	MOV R2, R19			    ; Set Char1L register to TABLEA beginning
000059 e830                      	LDI R19, low(TABLEBLANK*2)  ; Load TABLEA beginning address into R19
00005a 2e13                      	MOV R1, R19			    ; Set Char1H to TABLEA beginning
00005b e430                      	LDI R19, high(TABLEBLANK*2) ; Load TABLEA beginning address into R19  
00005c 2e43                      	MOV R4, R19			    ; Set Char1L register to TABLEA beginning
00005d e830                      	LDI R19, low(TABLEBLANK*2)  ; Load TABLEA beginning address into R19
00005e 2e33                      	MOV R3, R19			    ; Set Char1H to TABLEA beginning
00005f e430                      	LDI R19, high(TABLEBLANK*2) ; Load TABLEA beginning address into R19  
000060 2e63                      	MOV R6, R19			    ; Set Char1L register to TABLEA beginning
000061 e830                      	LDI R19, low(TABLEBLANK*2)  ; Load TABLEA beginning address into R19
000062 2e53                      	MOV R5, R19			    ; Set Char1H to TABLEA beginning
000063 e430                      	LDI R19, high(TABLEBLANK*2) ; Load TABLEA beginning address into R19  
000064 2e83                      	MOV R8, R19			    ; Set Char1L register to TABLEA beginning
000065 e830                      	LDI R19, low(TABLEBLANK*2)  ; Load TABLEA beginning address into R19
000066 2e73                      	MOV R7, R19			    ; Set Char1H to TABLEA beginning
000067 2733                      	CLR R19					; Clear the R19 register
                                 
                                 FINISH:
                                 	; Call particular routines based on MODE register
000068 30a0                      	CPI R26, 0				; Compare MODE register with zero
000069 f039                      	BREQ KEYFINISH			; Branch to KEYFINISH if MODE = 0
00006a 30a1                      	CPI R26, 1				; Compare MODE register with one
00006b f041                      	BREQ TESTFINISH			; Branch to TESTFINISH if MODE = 1
00006c 30a2                      	CPI R26, 2				; Compare MODE register with two
00006d f069                      	BREQ LASERFINISH		; Branch to LASERFINISH if MODE = 2
00006e 30a3                      	CPI R26, 3				; Compare MODE register with three
00006f f0f1                      	BREQ ANIMFINISH			; Branch to ANIMFINISH if MODE = 3
000070 cff7                      	RJMP FINISH				; Jump back to start of FINISH
                                 
                                 KEYFINISH:
                                 	; Select LCD
000071 9a2b                      	SBI PORTB, 3			; Set PortB, bit 3 to select LCD
000072 9a2c                      	SBI PORTB, 4			; Set PortB, bit 4 to select LCD
000073 cff4                      	RJMP FINISH				; Jump back to FINISH
                                 
                                 TESTFINISH:
                                 	; Select PIA
000074 982b                      	CBI PORTB, 3			; Clear PortB, bit 3 to select PIA
000075 982c                      	CBI PORTB, 4			; Clear PortB, bit 4 to select PIA
                                 	; Initialize z-pointer
000076 e4f0                      	LDI ZH, high(TABLESTAR*2) ; Set z-pointer to TABLESTAR beginning
000077 e0e0                      	LDI ZL, low(TABLESTAR*2)  ; Set z-pointer to TABLESTAR beginning
                                 	; Output coordinates
000078 2733                      	CLR R19					; Clear the laser offset register
000079 d05e                      	RCALL LASEROUTPUT		; Call the laser output subroutine
                                 	; Jump back
00007a cfed                      	RJMP FINISH				; Jump back to FINISH
                                 
                                 LASERFINISH:
                                 	; Select PIA
00007b 982b                      	CBI PORTB, 3			; Clear PortB, bit 3 to select PIA
00007c 982c                      	CBI PORTB, 4			; Clear PortB, bit 4 to select PIA
                                 	; Initialize z-pointer for first character
00007d 2df2                      	MOV ZH, R2				; Set z-pointer to TABLEA beginning
00007e 2de1                      	MOV ZL, R1				; Set z-pointer to TABLEA beginning
                                 	; Output coordinates for first character
00007f 2733                      	CLR R19					; Clear the laser offset register
000080 d057                      	RCALL LASEROUTPUT		; Call the laser test pattern subroutine
                                 	; Initialize z-pointer for second character
000081 2df4                      	MOV ZH, R4				; Set z-pointer to TABLEA beginning
000082 2de3                      	MOV ZL, R3				; Set z-pointer to TABLEA beginning
                                 	; Output coordinates for second character
000083 e430                      	LDI R19, 0x40			; Set the laser offset for the second character
000084 d053                      	RCALL LASEROUTPUT		; Call the laser test pattern subroutine
                                 	; Initialize z-pointer for third character
000085 2df6                      	MOV ZH, R6				; Set z-pointer to TABLEA beginning
000086 2de5                      	MOV ZL, R5				; Set z-pointer to TABLEA beginning
                                 	; Output coordinates for third character
000087 e830                      	LDI R19, 0x80			; Set the laser offset for the third character
000088 d04f                      	RCALL LASEROUTPUT		; Call the laser test pattern subroutine
                                 	; Initialize z-pointer for fourth character
000089 2df8                      	MOV ZH, R8				; Set z-pointer to TABLEA beginning
00008a 2de7                      	MOV ZL, R7				; Set z-pointer to TABLEA beginning
                                 	; Output coordinates for fourth  character
00008b ec30                      	LDI R19, 0xC0			; Set the laser offset for the fourth character
00008c d04b                      	RCALL LASEROUTPUT		; Call the laser test pattern subroutine
                                 	; Jump back
00008d cfda                      	RJMP FINISH				; Jump back to FINISH
                                 
                                 ANIMFINISH:
                                 	; Select PIA
00008e 982b                      	CBI PORTB, 3			; Clear PortB, bit 3 to select PIA
00008f 982c                      	CBI PORTB, 4			; Clear PortB, bit 4 to select PIA
                                 	;RCALL LASERANIMATION	; Call the Laser Animation subroutine
000090 cfd7                      	RJMP FINISH				; Jump back to FINISH
                                 
                                 ;==================================================================================
                                 ; FUNCTIONS
                                 ;==================================================================================
                                 
                                 OUTCOMM:
000091 9a2b                      	SBI PORTB, 3			; Set PortB, bit 3 to select LCD
000092 9a2c                      	SBI PORTB, 4			; Set PortB, bit 4 to select LCD
000093 9828                      	CBI PORTB, 0			; Select Register 0 of the display 
000094 e010                      	LDI R17, 0x00			; Load 0x00 into R17
000095 b91a                      	OUT DDRD, R17			; Set PIND as input
000096 d00e                      	RCALL CHECKBUSY			; Call the checkbusy routine
000097 ef1f                      	LDI R17, 0xFF			; Load 0xFF into R17
000098 b91a                      	OUT DDRD, R17			; Set PORTD as output
000099 b90b                      	OUT PORTD, R16			; OUTPUT the contents of R16 to PORTD
00009a d02a                      	RCALL EXEC				; Call the EXEC subroutine 
00009b 9508                      	RET						; Return to the origin of subroutine call
                                 
                                 OUTCHAR:
00009c 9a2b                      	SBI PORTB, 3			; Set PortB, bit 3 to select LCD
00009d 9a2c                      	SBI PORTB, 4			; Set PortB, bit 4 to select LCD
00009e d006                      	RCALL CHECKBUSY			; Call the CHECKBUSY subroutine
00009f 982a                      	CBI PORTB, 2			; Set E = 0
0000a0 9829                      	CBI PORTB, 1			; Set R/!W = 0
0000a1 9a28                      	SBI PORTB, 0			; Set RS = 1
0000a2 b90b                      	OUT PORTD, R16			; Output R16 to PORTD
0000a3 d021                      	RCALL EXEC				; Call the EXEC subroutine 
0000a4 9508                      	RET						; Return to the origin of the subroutine call
                                 
                                 CHECKBUSY:
0000a5 9a2b                      	SBI PORTB, 3			; Set PortB, bit 3 to select LCD
0000a6 9a2c                      	SBI PORTB, 4			; Set PortB, bit 4 to select LCD
0000a7 982a                      	CBI PORTB, 2			; Set E = 0
0000a8 9a29                      	SBI PORTB, 1			; Set R/!W = 1
0000a9 9828                      	CBI PORTB, 0			; Set RS = 0
0000aa 9a2a                      	SBI PORTB, 2			; Set E = 1
0000ab d004                      	RCALL DELAY				; Call the DELAY subroutine
0000ac 982a                      	CBI PORTB, 2			; Set E = 0
0000ad 9829                      	CBI PORTB, 1			; Set R/!W = 0
0000ae 9828                      	CBI PORTB, 0			; Set RS = 0
0000af 9508                      	RET						; Return to origin of subroutine call
                                 
                                 DELAY:
0000b0 e071                      	LDI R23, 1				; Load 1 into R23
0000b1 ef6f                      LP3:LDI R22, 255			; Load 255 into R22
0000b2 ef5f                      LP2:LDI R21, 255			; Load 255 into R21
0000b3 955a                      LP1:DEC R21					; Decrement R21
0000b4 f7f1                      	BRNE LP1				; Branch to LP1 if R21 != 0
0000b5 956a                      	DEC R22					; Decrement R22
0000b6 f7d9                      	BRNE LP2				; Branch to LP2 if R22 != 0
0000b7 957a                      	DEC R23					; Decrement R23
0000b8 f7c1                      	BRNE LP3				; Branch to LP3 if R23 != 0
0000b9 9508                      	RET						; Return to origin of subroutine calls
                                 
                                 LASERDELAY:
0000ba e072                      	LDI R23, 2				; Load 2 into R23
0000bb 9160 0079                 LR3:LDS R22, ADCH			; Load 27 into R22
0000bd ef5f                      LR2:LDI R21, 255			; Load 255 into R21
0000be 955a                      LR1:DEC R21					; Decrement R21
0000bf f7f1                      	BRNE LR1				; Branch to LP1 if R21 != 0
0000c0 956a                      	DEC R22					; Decrement R22
0000c1 f7d9                      	BRNE LR2				; Branch to LP2 if R22 != 0
0000c2 957a                      	DEC R23					; Decrement R23
0000c3 f7b9                      	BRNE LR3				; Branch to LP3 if R23 != 0
0000c4 9508                      	RET						; Return to origin of subroutine calls
                                 
                                 EXEC:
0000c5 9a2a                      	SBI PORTB, 2			; Set E=1
0000c6 0000                      	NOP						; Wait for one cycle
0000c7 0000                      	NOP						; Wait for one cycle
0000c8 0000                      	NOP						; Wait for one cycle
0000c9 0000                      	NOP						; Wait for one cycle
0000ca 0000                      	NOP						; Wait for one cycle
0000cb 0000                      	NOP						; Wait for one cycle
0000cc 0000                      	NOP						; Wait for one cycle
0000cd 0000                      	NOP						; Wait for one cycle
0000ce 982a                      	CBI PORTB, 2			; Set E=0
0000cf 0000                      	NOP						; Wait for one cycle
0000d0 0000                      	NOP						; Wait for one cycle
0000d1 0000                      	NOP						; Wait for one cycle
0000d2 0000                      	NOP						; Wait for one cycle
0000d3 0000                      	NOP						; Wait for one cycle
0000d4 0000                      	NOP						; Wait for one cycle
0000d5 0000                      	NOP						; Wait for one cycle
0000d6 0000                      	NOP						; Wait for one cycle
0000d7 9508                      	RET						; Return to origin of subroutine call
                                 	
                                 LASEROUTPUT:
                                 	; Get value in table
0000d8 95c8                      	LPM						; Load the value pointed to by Z, store it in R0
0000d9 2d00                      	MOV R16, R0				; Load the value for R0 into R16
0000da 3101                      	CPI R16, 0x11			; Compares the value in R16 to "end of table" code
0000db f0d1                      	BREQ LASEREND			; If end of table, branch to LASEREND
0000dc 3000                      	CPI R16, 0x00			; Compares the value in R16 to "laser off" code
0000dd f089                      	BREQ LASEROFF			; If "laser off", branch to LASEROFF
0000de 3f0f                      	CPI R16, 0xFF			; Compares the value in R16 to "laser on" code
0000df f091                      	BREQ LASERON			; If "laser on", branch to LASERON
                                 	; X-Coordinate
0000e0 0f03                      	ADD R16, R19			; Add the laser offset value to the x-coordinate
0000e1 9828                      	CBI PORTB, 0			; Selects Data Registers
0000e2 9829                      	CBI PORTB, 1			; Selects DRA
0000e3 b90b                      	OUT PORTD, R16			; Writes the data to DRA of the PIA
0000e4 dfe0                      	RCALL EXEC				; Executes Instruction 
                                 	; Next Value
0000e5 95e3                      	INC ZL					; Increments the z-pointer to the next point in the table
0000e6 95c8                      	LPM						; Load the value pointed to by Z, store it in R0
0000e7 2d00                      	MOV R16, R0				; Load the value for R0 into R16
                                 	; Y-Coordinate
0000e8 9828                      	CBI PORTB, 0			; Selects Data Registers
0000e9 9a29                      	SBI PORTB, 1			; Selects DRB
0000ea b90b                      	OUT PORTD, R16			; Writes the data to DRB of the PIA
0000eb dfd9                      	RCALL EXEC				; Execute Instruction	
0000ec 95e3                      	INC ZL					; Increments the z-pointer to the next point in the table
0000ed dfcc                      	RCALL LASERDELAY		; Delay so the mirrors of the laser can catch up
0000ee cfe9                      	RJMP LASEROUTPUT		; Jump back to LASEROUTPUT	
                                 LASEROFF:
0000ef 982d                      	CBI PORTB, 5			; Turn off laser
0000f0 95e3                      	INC ZL
0000f1 cfe6                      	RJMP LASEROUTPUT		; Jump back to LASERTESTPATTERN
                                 LASERON:
0000f2 9a2d                      	SBI PORTB, 5			; Turn on laser
0000f3 95e3                      	INC ZL
0000f4 dfc5                      	RCALL LASERDELAY		; Delay so the mirrors of the laser can catch up
0000f5 cfe2                      	RJMP LASEROUTPUT		; Jump back to LASERTESTPATTERN
                                 LASEREND:
0000f6 9508                      	RET						; Return to where it was called
                                 	
                                 PCINT:
0000f7 9590                      	COM R25					; Complement the redundancy register
0000f8 ff90                      	SBRS R25, 0				; Skip next line if R25 bit 0 is set
0000f9 9518                      	RETI					; Return from interrupt
0000fa b106                      	IN R16, PINC			; Put data from PINC into R16
0000fb 710f                      	ANDI R16, 0x1F			; AND R16 with 0x1F
0000fc 3102                      	CPI R16, 0x12			; Compare R16 with the hex value for the "shift" key
0000fd f1a1                      	BREQ SHIFT				; If R16 = Shift, branch to SHIFT routine
0000fe 3103                      	CPI R16, 0x13			; Compare R16 with the hex value for the "mode" key
0000ff f1a1                      	BREQ MODE				; If R16 = Mode, branch to MODE routine
000100 30a0                      	CPI R26, 0				; Compare MODE register to 0
000101 f019                      	BREQ CHARSELECT			; Branch to CHARSELECT if MODE == 0			
000102 30a2                      	CPI R26, 2				; Compare MODE register to 2
000103 f099                      	BREQ LASERCHARSELECT	; Branch to LASERCHARSELECT if MODE == 2	
000104 9518                      	RETI					; Return from the interrupt
                                 
                                 CHARSELECT:
000105 3f8f                      	CPI R24, 0xFF			; Compare Shift Register to 0xFF
000106 f041                      	BREQ SHIFTSELECT		; If Shift Register = 0xFF, branch to SHIFTSELECT
000107 e2f0                      	LDI ZH, high(CHARTABLE*2)	; Set Z-pointer to CHARTABLE beginning
000108 e0e0                      	LDI ZL, low(CHARTABLE*2)	; Set Z-pointer to CHARTABLE beginning
000109 0fe0                      	ADD ZL, R16				; ADD R16 value to low z-pointer
00010a 0fe0                      	ADD ZL, R16				; ADD R16 value to low z-pointer again
00010b 95c8                      	LPM						; Load the value pointed to by Z, store it in R0
00010c 2d00                      	MOV R16, R0				; Load the value for R0 into R16
00010d df8e                      	RCALL OUTCHAR			; Call the OUTCHAR subroutine to output this character to the display
00010e 9518                      	RETI					; Return from the interrupt
                                 
                                 SHIFTSELECT:
00010f e2f0                      	LDI ZH, high(SHIFTTABLE*2)	; Set Z-pointer to CHARTABLE beginning
000110 eae0                      	LDI ZL, low(SHIFTTABLE*2)	; Set Z-pointer to CHARTABLE beginning
000111 0fe0                      	ADD ZL, R16				; ADD R16 value to low z-pointer
000112 0fe0                      	ADD ZL, R16				; ADD R16 value to low z-pointer again
000113 95c8                      	LPM						; Load the value pointed to by Z, store it in R0
000114 2d00                      	MOV R16, R0				; Load the value for R0 into R16
000115 df86                      	RCALL OUTCHAR			; Call the OUTCHAR subroutine to output this character to the display
000116 9518                      	RETI					; Return from the interrupt
                                 
                                 LASERCHARSELECT:
000117 3f8f                      	CPI R24, 0xFF			; Compare Shift Register to 0xFF
000118 f019                      	BREQ LASERSHIFTSELECT	; If Shift Register = 0xFF, branch to LASERSHIFTSELECT
000119 e2f2                      	LDI ZH, high(TABLEA*2)	; Set Z-pointer to TABLEA beginning
00011a e0e0                      	LDI ZL, low(TABLEA*2)	; Set Z-pointer to TABLEA beginning
00011b c003                      	RJMP LASERSELECT		; Jump to LASERSELECT
                                 LASERSHIFTSELECT:
00011c e2fb                      	LDI ZH, high(TABLES*2)	; Set Z-pointer to TABLES beginning
00011d e0e0                      	LDI ZL, low(TABLES*2)	; Set Z-pointer to TABLES beginning
00011e c000                      	RJMP LASERSELECT		; Jump to LASERSELECT
                                 LASERSELECT:
00011f 3000                      	CPI R16, 0				; Compare R16 with 0
000120 f041                      	BREQ LASERBUFFERSET		; If R16 == 0, branch to LASERBUFFERSET
000121 d002                      	RCALL LASERNEXTCHAR		; Advance the Z-pointer to the next character table
000122 950a                      	DEC R16					; Decrement R16
000123 cffb                      	RJMP LASERSELECT		; Jump back to top of LASERSELECT
                                 LASERNEXTCHAR:
                                 	; ADD 0x80 to Z-pointer to reach the next character table
000124 96b0                      	ADIW ZH:ZL, 0x20		; Add 0x20 to the ZL register
000125 96b0                      	ADIW ZH:ZL, 0x20		; Add 0x20 to the ZL register
000126 96b0                      	ADIW ZH:ZL, 0x20		; Add 0x20 to the ZL register
000127 96b0                      	ADIW ZH:ZL, 0x20		; Add 0x20 to the ZL register
000128 9508                      	RET						; Return to origin of subroutine call
                                 LASERBUFFERSET:
                                 	; Shift the laser character registers
000129 2c86                      	MOV R8, R6				; Copy the value in R6 into R8
00012a 2c75                      	MOV R7, R5				; Copy the value in R5 into R7
00012b 2c64                      	MOV R6, R4				; Copy R4 to R6
00012c 2c53                      	MOV R5, R3				; Copy R3 to R5
00012d 2c42                      	MOV R4, R2				; Copy R2 to R4
00012e 2c31                      	MOV R3, R1				; Copy R1 to R3
00012f 2e2f                      	MOV R2, ZH				; Copy ZH to R2
000130 2e1e                      	MOV R1, ZL				; Copy ZL to R1
000131 9518                      	RETI					; Return from interrupt
                                 
                                 SHIFT:
000132 9580                      	COM R24					; Complement the R1 (shift) register
000133 9518                      	RETI					; Return from the interrupt
                                 
                                 MODE:
000134 30a3                      	CPI R26, 3				; Compare R26 to 3
000135 f011                      	BREQ RESETMODE			; Branch to RESETMODE if MODE = 3
000136 95a3                      	INC R26					; Increment the MODE register
000137 9518                      	RETI					; Return from the interrupt
                                 RESETMODE:
000138 27aa                      	CLR R26					; Clear the MODE register
000139 9518                      	RETI					; Return from the interrupt
                                 
                                 ;===================================================================================================
                                 ;TABLES
                                 ;===================================================================================================
                                 
                                 .org 0x1000					; Set origin to FLASH 0x1000
                                 CHARTABLE:
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(430): warning: .cseg .db misalignment - padding zero byte
001000 0041                          .db 'A'					; Store value for 'A'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(431): warning: .cseg .db misalignment - padding zero byte
001001 0042                          .db 'B'					; Store value for 'B'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(432): warning: .cseg .db misalignment - padding zero byte
001002 0043                          .db 'C'					; Store value for 'C'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(433): warning: .cseg .db misalignment - padding zero byte
001003 0044                          .db 'D'					; Store value for 'D'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(434): warning: .cseg .db misalignment - padding zero byte
001004 0045                          .db 'E'					; Store value for 'E'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(435): warning: .cseg .db misalignment - padding zero byte
001005 0046                          .db 'F'					; Store value for 'F'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(436): warning: .cseg .db misalignment - padding zero byte
001006 0047                          .db 'G'					; Store value for 'G'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(437): warning: .cseg .db misalignment - padding zero byte
001007 0048                          .db 'H'					; Store value for 'H'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(438): warning: .cseg .db misalignment - padding zero byte
001008 0049                          .db 'I'					; Store value for 'I'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(439): warning: .cseg .db misalignment - padding zero byte
001009 004a                          .db 'J'					; Store value for 'J'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(440): warning: .cseg .db misalignment - padding zero byte
00100a 004b                          .db 'K'					; Store value for 'K'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(441): warning: .cseg .db misalignment - padding zero byte
00100b 004c                          .db 'L'					; Store value for 'L'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(442): warning: .cseg .db misalignment - padding zero byte
00100c 004d                          .db 'M'					; Store value for 'M'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(443): warning: .cseg .db misalignment - padding zero byte
00100d 004e                          .db 'N'					; Store value for 'N'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(444): warning: .cseg .db misalignment - padding zero byte
00100e 004f                          .db 'O'					; Store value for 'O'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(445): warning: .cseg .db misalignment - padding zero byte
00100f 0050                          .db 'P'					; Store value for 'P'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(446): warning: .cseg .db misalignment - padding zero byte
001010 0051                          .db 'Q'					; Store value for 'Q'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(447): warning: .cseg .db misalignment - padding zero byte
001011 0052                          .db 'R'					; Store value for 'R'
001012 9508                          RET					    ; Return to origin of subroutine call
                                 
                                 .org 0x1050                 ; Set origin to FLASH 0x1050
                                 SHIFTTABLE:
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(452): warning: .cseg .db misalignment - padding zero byte
001050 0053                          .db 'S'					; Store value for 'S'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(453): warning: .cseg .db misalignment - padding zero byte
001051 0054                          .db 'T'					; Store value for 'T'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(454): warning: .cseg .db misalignment - padding zero byte
001052 0055                          .db 'U'					; Store value for 'U'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(455): warning: .cseg .db misalignment - padding zero byte
001053 0056                          .db 'V'					; Store value for 'V'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(456): warning: .cseg .db misalignment - padding zero byte
001054 0057                          .db 'W'					; Store value for 'W'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(457): warning: .cseg .db misalignment - padding zero byte
001055 0058                          .db 'X'					; Store value for 'X'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(458): warning: .cseg .db misalignment - padding zero byte
001056 0059                          .db 'Y'					; Store value for 'Y'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(459): warning: .cseg .db misalignment - padding zero byte
001057 005a                          .db 'Z'					; Store value for 'Z'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(460): warning: .cseg .db misalignment - padding zero byte
001058 0030                          .db '0'					; Store value for '0'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(461): warning: .cseg .db misalignment - padding zero byte
001059 0031                          .db '1'					; Store value for '1'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(462): warning: .cseg .db misalignment - padding zero byte
00105a 0032                          .db '2'					; Store value for '2'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(463): warning: .cseg .db misalignment - padding zero byte
00105b 0033                          .db '3'					; Store value for '3'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(464): warning: .cseg .db misalignment - padding zero byte
00105c 0034                          .db '4'					; Store value for '4'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(465): warning: .cseg .db misalignment - padding zero byte
00105d 0035                          .db '5'					; Store value for '5'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(466): warning: .cseg .db misalignment - padding zero byte
00105e 0036                          .db '6'					; Store value for '6'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(467): warning: .cseg .db misalignment - padding zero byte
00105f 0037                          .db '7'					; Store value for '7'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(468): warning: .cseg .db misalignment - padding zero byte
001060 0038                          .db '8'					; Store value for '8'
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(469): warning: .cseg .db misalignment - padding zero byte
001061 0039                          .db '9'					; Store value for '9'
001062 9508                          RET						; Return to origin of subroutine call
                                 
                                 	.org 0x1100
                                 TABLEA:
001100 4002
001101 1eff
001102 3dc0
001103 0040
001104 8210
001105 2dff
001106 0082
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(474): warning: .cseg .db misalignment - padding zero byte
001107 0011                      	.db 0x02, 0x40, 0xFF, 0x1E, 0xC0, 0x3D, 0x40, 0x00, 0x10, 0x82, 0xFF, 0x2D, 0x82, 0x00, 0x11
                                 	.org 0x1140
                                 TABLEB:
001140 4002
001141 02ff
001142 28c0
001143 3dc0
001144 3daa
001145 2896
001146 0282
001147 2882
001148 3d82
001149 3d6e
00114a 2850
00114b 0240
00114c 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(477): warning: .cseg .db misalignment - padding zero byte
00114d 0011                      	.db 0x02, 0x40, 0xFF, 0x02, 0xC0, 0x28, 0xC0, 0x3D, 0xAA, 0x3D, 0x96, 0x28, 0x82, 0x02, 0x82, 0x28, 0x82, 0x3D, 0x6E, 0x3D, 0x50, 0x28, 0x40, 0x02, 0x40, 0x00, 0x11
                                 	.org 0x1180
                                 TABLEC:
001180 a03d
001181 1dff
001182 02c0
001183 02a0
001184 1f58
001185 3d40
001186 0058
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(480): warning: .cseg .db misalignment - padding zero byte
001187 0011                      	.db 0x3D, 0xA0, 0xFF, 0x1D, 0xC0, 0x02, 0xA0, 0x02, 0x58, 0x1F, 0x40, 0x3D, 0x58, 0x00, 0x11
                                 	.org 0x11C0
                                 TABLED:
0011c0 4002
0011c1 02ff
0011c2 28c1
0011c3 3dc0
0011c4 3d96
0011c5 286e
0011c6 0240
0011c7 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(483): warning: .cseg .db misalignment - padding zero byte
0011c8 0011                      	.db 0x02, 0x40, 0xFF, 0x02, 0xC1, 0x28, 0xC0, 0x3D, 0x96, 0x3D, 0x6E, 0x28, 0x40, 0x02, 0x40, 0x00, 0x11
                                 	.org 0x1200
                                 TABLEE:
001200 c03d
001201 02ff
001202 02c0
001203 3d40
001204 0240
001205 0240
001206 2882
001207 0082
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(486): warning: .cseg .db misalignment - padding zero byte
001208 0011                      	.db 0x3D, 0xC0, 0xFF, 0x02, 0xC0, 0x02, 0x40, 0x3D, 0x40, 0x02, 0x40, 0x02, 0x82, 0x28, 0x82, 0x00, 0x11
                                 	.org 0x1240
                                 TABLEF:
001240 c03d
001241 02ff
001242 02c0
001243 0240
001244 2882
001245 0082
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(489): warning: .cseg .db misalignment - padding zero byte
001246 0011                      	.db 0x3D, 0xC0, 0xFF, 0x02, 0xC0, 0x02, 0x40, 0x02, 0x82, 0x28, 0x82, 0x00, 0x11
                                 	.org 0x1280
                                 TABLEG:
001280 a43e
001281 33ff
001282 0dbf
001283 02c0
001284 02a3
001285 0d5a
001286 3241
001287 3e41
001288 3e58
001289 247c
00128a 007b
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(492): warning: .cseg .db misalignment - padding zero byte
00128b 0011                      	.db 0x3E, 0xA4, 0xFF, 0x33, 0xBF, 0x0D, 0xC0, 0x02, 0xA3, 0x02, 0x5A, 0x0D, 0x41, 0x32, 0x41, 0x3E, 0x58, 0x3E, 0x7C, 0x24, 0x7B, 0x00, 0x11
                                 	.org 0x12C0
                                 TABLEH:
0012c0 c002
0012c1 02ff
0012c2 0241
0012c3 3e82
0012c4 3e82
0012c5 3ec0
0012c6 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(495): warning: .cseg .db misalignment - padding zero byte
0012c7 0011                      	.db 0x02, 0xC0, 0xFF, 0x02, 0x41, 0x02, 0x82, 0x3E, 0x82, 0x3E, 0xC0, 0x3E, 0x40, 0x00, 0x11
                                 	.org 0x1300
                                 TABLEI:
001300 c002
001301 3eff
001302 1fc0
001303 1fc0
001304 0240
001305 3e40
001306 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(498): warning: .cseg .db misalignment - padding zero byte
001307 0011                      	.db 0x02, 0xC0, 0xFF, 0x3E, 0xC0, 0x1F, 0xC0, 0x1F, 0x40, 0x02, 0x40, 0x3E, 0x40, 0x00, 0x11
                                 	.org 0x1340
                                 TABLEJ:
001340 c03e
001341 3eff
001342 216f
001343 0240
001344 006f
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(501): warning: .cseg .db misalignment - padding zero byte
001345 0011                      	.db 0x3E, 0xC0, 0xFF, 0x3E, 0x6F, 0x21, 0x40, 0x02, 0x6F, 0x00, 0x11
                                 	.org 0x1380
                                 TABLEK:
001380 c002
001381 02ff
001382 3e82
001383 02c0
001384 3e82
001385 0240
001386 0282
001387 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(504): warning: .cseg .db misalignment - padding zero byte
001388 0011                      	.db 0x02, 0xC0, 0xFF, 0x02, 0x82, 0x3E, 0xC0, 0x02, 0x82, 0x3E, 0x40, 0x02, 0x82, 0x02, 0x40, 0x00, 0x11
                                 	.org 0x13C0
                                 TABLEL:
0013c0 c002
0013c1 02ff
0013c2 3e40
0013c3 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(507): warning: .cseg .db misalignment - padding zero byte
0013c4 0011                      	.db 0x02, 0xC0, 0xFF, 0x02, 0x40, 0x3E, 0x40, 0x00, 0x11
                                 	.org 0x1400
                                 TABLEM: ; Janky
001400 4002
001401 11ff
001402 20c0
001403 2e40
001404 3ebf
001405 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(510): warning: .cseg .db misalignment - padding zero byte
001406 0011                      	.db 0x02, 0x40, 0xFF, 0x11, 0xC0, 0x20, 0x40, 0x2E, 0xBF, 0x3E, 0x40, 0x00, 0x11
                                 	.org 0x1440
                                 TABLEN:
001440 4002
001441 02ff
001442 3ec0
001443 3e40
001444 00c0
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(513): warning: .cseg .db misalignment - padding zero byte
001445 0011                      	.db 0x02, 0x40, 0xFF, 0x02, 0xC0, 0x3E, 0x40, 0x3E, 0xC0, 0x00, 0x11
                                 	.org 0x1480
                                 TABLEO:
001480 c014
001481 02ff
001482 02a0
001483 145c
001484 2940
001485 3e40
001486 3e5b
001487 29a0
001488 14c0
001489 00c0
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(516): warning: .cseg .db misalignment - padding zero byte
00148a 0011                      	.db 0x14, 0xC0, 0xFF, 0x02, 0xA0, 0x02, 0x5C, 0x14, 0x40, 0x29, 0x40, 0x3E, 0x5B, 0x3E, 0xA0, 0x29, 0xC0, 0x14, 0xC0, 0x00, 0x11
                                 	.org 0x14C0
                                 TABLEP:
0014c0 4002
0014c1 02ff
0014c2 3ec0
0014c3 3ec0
0014c4 0282
0014c5 0082
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(519): warning: .cseg .db misalignment - padding zero byte
0014c6 0011                      	.db 0x02, 0x40, 0xFF, 0x02, 0xC0, 0x3E, 0xC0, 0x3E, 0x82, 0x02, 0x82, 0x00, 0x11
                                 	.org 0x1500
                                 TABLEQ:
001500 c014
001501 02ff
001502 02a0
001503 145c
001504 2940
001505 3e40
001506 3e5b
001507 29a0
001508 14c0
001509 00c0
00150a 28ff
00150b 3e5a
00150c 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(522): warning: .cseg .db misalignment - padding zero byte
00150d 0011                      	.db 0x14, 0xC0, 0xFF, 0x02, 0xA0, 0x02, 0x5C, 0x14, 0x40, 0x29, 0x40, 0x3E, 0x5B, 0x3E, 0xA0, 0x29, 0xC0, 0x14, 0xC0, 0x00, 0xFF, 0x28, 0x5A, 0x3E, 0x40, 0x00, 0x11
                                 	.org 0x1540
                                 TABLER:
001540 4002
001541 02ff
001542 3ec0
001543 3ec0
001544 0282
001545 3e82
001546 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(525): warning: .cseg .db misalignment - padding zero byte
001547 0011                      	.db 0x02, 0x40, 0xFF, 0x02, 0xC0, 0x3E, 0xC0, 0x3E, 0x82, 0x02, 0x82, 0x3E, 0x40, 0x00, 0x11
                                 	.org 0x1580
                                 TABLES:
001580 c03e
001581 02ff
001582 02c0
001583 3e82
001584 3e82
001585 0240
001586 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(528): warning: .cseg .db misalignment - padding zero byte
001587 0011                      	.db 0x3E, 0xC0, 0xFF, 0x02, 0xC0, 0x02, 0x82, 0x3E, 0x82, 0x3E, 0x40, 0x02, 0x40, 0x00, 0x11
                                 	.org 0x15C0
                                 TABLET:
0015c0 4021
0015c1 21ff
0015c2 02c0
0015c3 3ec0
0015c4 00c0
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(531): warning: .cseg .db misalignment - padding zero byte
0015c5 0011                      	.db 0x21, 0x40, 0xFF, 0x21, 0xC0, 0x02, 0xC0, 0x3E, 0xC0, 0x00, 0x11	
                                 	.org 0x1600
                                 TABLEU:
001600 c002
001601 02ff
001602 3e40
001603 3e40
001604 00c0
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(534): warning: .cseg .db misalignment - padding zero byte
001605 0011                      	.db 0x02, 0xC0, 0xFF, 0x02, 0x40, 0x3E, 0x40, 0x3E, 0xC0, 0x00, 0x11
                                 	.org 0x1640
                                 TABLEV:
001640 c002
001641 20ff
001642 3e40
001643 00c0
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(537): warning: .cseg .db misalignment - padding zero byte
001644 0011                      	.db 0x02, 0xC0, 0xFF, 0x20, 0x40, 0x3E, 0xC0, 0x00, 0x11
                                 	.org 0x1680
                                 TABLEW:
001680 c002
001681 14ff
001682 2140
001683 2d9b
001684 3e40
001685 00c0
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(540): warning: .cseg .db misalignment - padding zero byte
001686 0011                      	.db 0x02, 0xC0, 0xFF, 0x14, 0x40, 0x21, 0x9B, 0x2D, 0x40, 0x3E, 0xC0, 0x00, 0x11
                                 	.org 0x16C0
                                 TABLEX:
0016c0 c002
0016c1 3eff
0016c2 0040
0016c3 02ff
0016c4 3e40
0016c5 00c0
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(543): warning: .cseg .db misalignment - padding zero byte
0016c6 0011                      	.db 0x02, 0xC0, 0xFF, 0x3E, 0x40, 0x00, 0xFF, 0x02, 0x40, 0x3E, 0xC0, 0x00, 0x11
                                 	.org 0x1700
                                 TABLEY:
001700 c002
001701 20ff
001702 2082
001703 2040
001704 3e82
001705 00c0
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(546): warning: .cseg .db misalignment - padding zero byte
001706 0011                      	.db 0x02, 0xC0, 0xFF, 0x20, 0x82, 0x20, 0x40, 0x20, 0x82, 0x3E, 0xC0, 0x00, 0x11
                                 	.org 0x1740
                                 TABLEZ:
001740 c002
001741 3eff
001742 02c0
001743 3e40
001744 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(549): warning: .cseg .db misalignment - padding zero byte
001745 0011                      	.db 0x02, 0xC0, 0xFF, 0x3E, 0xC0, 0x02, 0x40, 0x3E, 0x40, 0x00, 0x11
                                 	.org 0x1780
                                 TABLE0:
001780 c014
001781 02ff
001782 02a0
001783 145c
001784 2940
001785 3e40
001786 3e5b
001787 29a0
001788 14c0
001789 00c0
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(552): warning: .cseg .db misalignment - padding zero byte
00178a 0011                      	.db 0x14, 0xC0, 0xFF, 0x02, 0xA0, 0x02, 0x5C, 0x14, 0x40, 0x29, 0x40, 0x3E, 0x5B, 0x3E, 0xA0, 0x29, 0xC0, 0x14, 0xC0, 0x00, 0x11
                                 	.org 0x17C0
                                 TABLE1:
0017c0 c01f
0017c1 1fff
0017c2 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(555): warning: .cseg .db misalignment - padding zero byte
0017c3 0011                      	.db 0x1F, 0xC0, 0xFF, 0x1F, 0x40, 0x00, 0x11
                                 	.org 0x1800
                                 TABLE2:
001800 c002
001801 3eff
001802 3ec0
001803 0282
001804 0282
001805 3e40
001806 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(558): warning: .cseg .db misalignment - padding zero byte
001807 0011                      	.db 0x02, 0xC0, 0xFF, 0x3E, 0xC0, 0x3E, 0x82, 0x02, 0x82, 0x02, 0x40, 0x3E, 0x40, 0x00, 0x11
                                 	.org 0x1840
                                 TABLE3:
001840 c002
001841 3eff
001842 3ec0
001843 1482
001844 3e82
001845 3e82
001846 0240
001847 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(561): warning: .cseg .db misalignment - padding zero byte
001848 0011                      	.db 0x02, 0xC0, 0xFF, 0x3E, 0xC0, 0x3E, 0x82, 0x14, 0x82, 0x3E, 0x82, 0x3E, 0x40, 0x02, 0x40, 0x00, 0x11
                                 	.org 0x1880
                                 TABLE4:
001880 6e3e
001881 02ff
001882 366e
001883 36c0
001884 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(564): warning: .cseg .db misalignment - padding zero byte
001885 0011                      	.db 0x3E, 0x6E, 0xFF, 0x02, 0x6E, 0x36, 0xC0, 0x36, 0x40, 0x00, 0x11
                                 	.org 0x18C0
                                 TABLE5:
0018c0 c03e
0018c1 02ff
0018c2 02c0
0018c3 3e89
0018c4 3e89
0018c5 315d
0018c6 1140
0018c7 0240
0018c8 005c
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(567): warning: .cseg .db misalignment - padding zero byte
0018c9 0011                      	.db 0x3E, 0xC0, 0xFF, 0x02, 0xC0, 0x02, 0x89, 0x3E, 0x89, 0x3E, 0x5D, 0x31, 0x40, 0x11, 0x40, 0x02, 0x5C, 0x00, 0x11
                                 	.org 0x1900
                                 TABLE6:
001900 c03e
001901 02ff
001902 02c0
001903 3e40
001904 3e40
001905 0282
001906 0082
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(570): warning: .cseg .db misalignment - padding zero byte
001907 0011                      	.db 0x3E, 0xC0, 0xFF, 0x02, 0xC0, 0x02, 0x40, 0x3E, 0x40, 0x3E, 0x82, 0x02, 0x82, 0x00, 0x11
                                 	.org 0x1940
                                 TABLE7:
001940 c002
001941 3eff
001942 02c0
001943 0040
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(573): warning: .cseg .db misalignment - padding zero byte
001944 0011                      	.db 0x02, 0xC0, 0xFF, 0x3E, 0xC0, 0x02, 0x40, 0x00, 0x11
                                 	.org 0x1980
                                 TABLE8:
001980 8202
001981 02ff
001982 0f57
001983 3240
001984 3e40
001985 3e58
001986 33aa
001987 0fc0
001988 02c0
001989 02aa
00198a 3e82
00198b 0082
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(576): warning: .cseg .db misalignment - padding zero byte
00198c 0011                      	.db 0x02, 0x82, 0xFF, 0x02, 0x57, 0x0F, 0x40, 0x32, 0x40, 0x3E, 0x58, 0x3E, 0xAA, 0x33, 0xC0, 0x0F, 0xC0, 0x02, 0xAA, 0x02, 0x82, 0x3E, 0x82, 0x00, 0x11
                                 	.org 0x19C0
                                 TABLE9:
0019c0 403e
0019c1 3eff
0019c2 02c0
0019c3 02c0
0019c4 3e82
0019c5 0082
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(579): warning: .cseg .db misalignment - padding zero byte
0019c6 0011                      	.db 0x3E, 0x40, 0xFF, 0x3E, 0xC0, 0x02, 0xC0, 0x02, 0x82, 0x3E, 0x82, 0x00, 0x11
                                 	.org 0x2000
                                 TABLESTAR:  ; Character table for the test pattern (square for now)
002000 0101
002001 01ff
002002 fefe
002003 fefe
002004 0101
002005 0001
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(582): warning: .cseg .db misalignment - padding zero byte
002006 0011                      	.db 0x01, 0x01, 0xFF, 0x01, 0xFE, 0xFE, 0xFE, 0xFE, 0x01, 0x01, 0x01, 0x00, 0x11
                                 	.org 0x2040
                                 TABLEBLANK: ; Table for a blank character
C:\Users\Avery\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(585): warning: .cseg .db misalignment - padding zero byte


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   4 r1 :   5 r2 :   5 r3 :   5 r4 :   5 
r5 :   5 r6 :   5 r7 :   4 r8 :   4 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  32 r17:  13 r18:  12 r19:  24 r20:   0 
r21:   4 r22:   4 r23:   4 r24:   4 r25:   2 r26:  10 r27:   3 r28:   0 
r29:   0 r30:  22 r31:  14 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   5 adiw  :   4 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  15 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   6 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  26 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  15 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   0 cpc   :   0 
cpi   :  15 cpse  :   0 dec   :   7 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   5 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  48 lds   :   1 lpm   :  12 lsl   :   0 
lsr   :   0 mov   :  28 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  16 or    :   0 ori   :   0 out   :  15 pop   :   0 
push  :   0 rcall :  30 ret   :  10 reti  :   8 rjmp  :  20 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  21 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   5 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 26 out of 113 (23.0%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x004082    632    666   1298   32768   4.0%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 74 warnings
