
AVRASM ver. 2.2.6  C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm Thu Mar 09 08:56:03 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m328pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; CSProject.asm
                                 ;
                                 ; Created: 2/27/2017 1:48:32 PM
                                 ; Author : Morgan Walkup
                                 ;
                                 
000000 c008                      RJMP INITIALIZE 			; Jump to INITIALIZE
000001 c007                      RJMP INITIALIZE				; Jump to INITIALIZE
000002 c006                      RJMP INITIALIZE				; Jump to INITIALIZE
000003 c005                      RJMP INITIALIZE				; Jump to INITIALIZE
000004 c004                      RJMP INITIALIZE				; Jump to INITIALIZE
000005 c003                      RJMP INITIALIZE				; Jump to INITIALIZE
000006 c002                      RJMP INITIALIZE				; Jump to INITIALIZE
000007 c001                      RJMP INITIALIZE				; Jump to INITIALIZE
000008 c0da                      RJMP PCINT					; Jump to PCINT routine
                                 
                                 ;==================================================================================
                                 ; INITIALIZE
                                 ;==================================================================================
                                 INITIALIZE:
                                 	; Initialize registers
000009 ef1f                      	LDI R17, 0xFF			; Load 0xFF into R17
00000a b914                      	OUT DDRB, R17			; Set PORTB as output
00000b b91a                      	OUT DDRD, R17			; Set PORTD as output
00000c e010                      	LDI R17, 0x00			; Load 0x00 into R17
00000d b917                      	OUT DDRC, R17			; Set PORTC as input
00000e 2788                      	CLR R24					; Clear SHIFT Register
00000f 27aa                      	CLR R26					; Clear MODE Register
000010 2733                      	CLR R19					; Clear LaserTemp Register
000011 2411                      	CLR R1					; Clear Char1L Register
000012 2422                      	CLR R2					; Clear Char1H Register
000013 2433                      	CLR R3
000014 2444                      	CLR R4
000015 2455                      	CLR R5
000016 2466                      	CLR R6
000017 2477                      	CLR R7
000018 2488                      	CLR R8
                                 
                                 	; Set up LCD
000019 9a2b                      	SBI PORTB, 3			; Set PortB, bit 3 to select LCD
00001a 9a2c                      	SBI PORTB, 4			; Set PortB, bit 4 to select LCD
00001b 9828                      	CBI PORTB, 0			; Select Register 0 of the display
                                 
00001c e001                      	LDI R16, 0x01			; Load 0x01 into R16 (Clear Display)
00001d d069                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine to output this command to the display
                                 
00001e e300                      	LDI R16, 0x30			; Load 0x30 into R16 
00001f d067                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
000020 e008                      	LDI R16, 0x08			; Load 0x08 into R16
000021 d065                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
000022 e006                      	LDI R16, 0x06			; Load 0x06 into R16
000023 d063                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
000024 e30c                      	LDI R16, 0x3C			; Load 0x3C into R16
000025 d061                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
000026 e00f                      	LDI R16, 0x0F			; Load 0x0F into R16 (Turns on Display and Cursor Blink)
000027 d05f                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
000028 e002                      	LDI R16, 0x02			; Load 0x02 into R16 (Cursor Home)
000029 d05d                      	RCALL OUTCOMM			; Call the OUTCOMM subroutine
                                 
                                 	; Set up pin change interrupts
00002a 9478                      	SEI						; Enable external interrrupts
00002b e012                      	LDI R17, 0x02			; Loads 2 into register 17
00002c 9310 0068                 	STS 0x68, R17			; Store R17's value into memory to enable pcint
00002e e210                      	LDI R17, 0x20			; Loads 0x20 into R17
00002f 9310 006c                 	STS 0x6C, R17			; Store R17's value into memory to enable pcint
                                 
                                 PIAINIT:
                                 	; Select PIA
000031 982b                      	CBI PORTB, 3			; Clear PortB, bit 3 to select PIA
000032 982c                      	CBI PORTB, 4			; Clear PortB, bit 4 to select PIA
                                 
                                 	; Set Bit 2 of CRA to 0
000033 9829                      	CBI PORTB, 1			; Clear RS1 to select CRA
000034 9a28                      	SBI PORTB, 0			; Set RS0 to select CRA with previous line
000035 e020                      	LDI R18, 0x00			; Clears CRA bit 2, to access DDRA
000036 b92b                      	OUT PORTD, R18			; Writes the data to the PIA
000037 d082                      	RCALL EXEC				; Execute Instruction
                                 	; Set DDRA to 0xFF
000038 9828                      	CBI PORTB, 0			; Clears RS0 select DDRA
000039 ef2f                      	LDI R18, 0xFF			; Sets DDRA to output
00003a b92b                      	OUT PORTD, R18			; Writes the data to the PIA
00003b d07e                      	RCALL EXEC				; Execute Instruction
                                 	; Set bit 2 of CRA to 1
00003c 9a28                      	SBI PORTB, 0			; Set RS0 to select CRA again
00003d e024                      	LDI R18, 0x04			; Sets CRA bit 2, to access DRA
00003e b92b                      	OUT PORTD, R18			; Writes the data to the PIA
00003f d07a                      	RCALL EXEC				; Execute Instruction
                                 
                                 	; Set bit 2 of CRB to 0
000040 9a29                      	SBI PORTB, 1			; Set RS1 to select CRB
000041 9a28                      	SBI PORTB, 0			; Set RSO to select CRB with previous line
000042 e020                      	LDI R18, 0x00			; Clears CRB bit 2, to access DDRB
000043 b92b                      	OUT PORTD, R18			; Writes the data to the PIA
000044 d075                      	RCALL EXEC				; Execute Instruction
                                 	; Set DDRB to 0xFF
000045 9828                      	CBI PORTB, 0			; Clears RS0 to select DDRB
000046 ef2f                      	LDI R18, 0xFF			; Sets DDRB to output
000047 b92b                      	OUT PORTD, R18			; Writes the data to the PIA
000048 d071                      	RCALL EXEC				; Execute Instruction
                                 	; Set bit 2 of CRB to 1
000049 9a28                      	SBI PORTB, 0			; Set RS0 to select CRB again
00004a e024                      	LDI R18, 0x04			; Set bit 2 of CRB to select DRB
00004b b92b                      	OUT PORTD, R18			; Writes the data to the PIA
00004c d06d                      	RCALL EXEC				; Execute Instruction
                                 
                                 FINISH:
                                 	; Call particular routines based on MODE register
00004d 30a0                      	CPI R26, 0				; Compare MODE register with zero
00004e f039                      	BREQ KEYFINISH			; Branch to KEYFINISH if MODE = 0
00004f 30a1                      	CPI R26, 1				; Compare MODE register with one
000050 f041                      	BREQ TESTFINISH			; Branch to TESTFINISH if MODE = 1
000051 30a2                      	CPI R26, 2				; Compare MODE register with two
000052 f069                      	BREQ LASERFINISH		; Branch to LASERFINISH if MODE = 2
000053 30a3                      	CPI R26, 3				; Compare MODE register with three
000054 f179                      	BREQ ANIMFINISH			; Branch to ANIMFINISH if MODE = 3
000055 cff7                      	RJMP FINISH				; Jump back to start of FINISH
                                 
                                 KEYFINISH:
                                 	; Select LCD
000056 9a2b                      	SBI PORTB, 3			; Set PortB, bit 3 to select LCD
000057 9a2c                      	SBI PORTB, 4			; Set PortB, bit 4 to select LCD
000058 cff4                      	RJMP FINISH				; Jump back to FINISH
                                 
                                 TESTFINISH:
                                 	; Select PIA
000059 982b                      	CBI PORTB, 3			; Clear PortB, bit 3 to select PIA
00005a 982c                      	CBI PORTB, 4			; Clear PortB, bit 4 to select PIA
                                 	; Initialize z-pointer
00005b e4f4                      	LDI ZH, high(TABLESTAR*2) ; Set z-pointer to TABLESTAR beginning
00005c e0e0                      	LDI ZL, low(TABLESTAR*2)  ; Set z-pointer to TABLESTAR beginning
                                 	; Output coordinates
00005d 2733                      	CLR R19					; Clear the laser offset register
00005e d06e                      	RCALL LASERTESTPATTERN	; Call the laser test pattern subroutine
                                 	; Jump back
00005f cfed                      	RJMP FINISH				; Jump back to FINISH
                                 
                                 LASERFINISH:
                                 	; Select PIA
000060 982b                      	CBI PORTB, 3			; Clear PortB, bit 3 to select PIA
000061 982c                      	CBI PORTB, 4			; Clear PortB, bit 4 to select PIA
                                 	; Initialize Laser Character Registers
000062 e234                      	LDI R19, high(TABLEA*2) ; Load TABLEA beginning address into R19  
000063 2e23                      	MOV R2, R19			    ; Set Char1L register to TABLEA beginning
000064 e030                      	LDI R19, low(TABLEA*2)  ; Load TABLEA beginning address into R19
000065 2e13                      	MOV R1, R19			    ; Set Char1H to TABLEA beginning
000066 e333                      	LDI R19, high(TABLE1*2) ; Load TABLEA beginning address into R19  
000067 2e43                      	MOV R4, R19			    ; Set Char1L register to TABLEA beginning
000068 e830                      	LDI R19, low(TABLE1*2)  ; Load TABLEA beginning address into R19
000069 2e33                      	MOV R3, R19			    ; Set Char1H to TABLEA beginning
00006a e430                      	LDI R19, high(TABLE2*2) ; Load TABLEA beginning address into R19  
00006b 2e63                      	MOV R6, R19			    ; Set Char1L register to TABLEA beginning
00006c e030                      	LDI R19, low(TABLE2*2)  ; Load TABLEA beginning address into R19
00006d 2e53                      	MOV R5, R19			    ; Set Char1H to TABLEA beginning
00006e e430                      	LDI R19, high(TABLE3*2) ; Load TABLEA beginning address into R19  
00006f 2e83                      	MOV R8, R19			    ; Set Char1L register to TABLEA beginning
000070 e830                      	LDI R19, low(TABLE3*2)  ; Load TABLEA beginning address into R19
000071 2e73                      	MOV R7, R19			    ; Set Char1H to TABLEA beginning
000072 2733                      	CLR R19					; Clear the R19 register
                                 	; Initialize z-pointer for first character
000073 2df2                      	MOV ZH, R2				; Set z-pointer to TABLEA beginning
000074 2de1                      	MOV ZL, R1				; Set z-pointer to TABLEA beginning
                                 	; Output coordinates for first character
000075 2733                      	CLR R19					; Clear the laser offset register
000076 d056                      	RCALL LASERTESTPATTERN	; Call the laser test pattern subroutine
                                 	; Initialize z-pointer for second character
000077 2df4                      	MOV ZH, R4				; Set z-pointer to TABLEA beginning
000078 2de3                      	MOV ZL, R3				; Set z-pointer to TABLEA beginning
                                 	; Output coordinates for second character
000079 e430                      	LDI R19, 0x40			; Set the laser offset for the second character
00007a d052                      	RCALL LASERTESTPATTERN	; Call the laser test pattern subroutine
                                 	; Initialize z-pointer for third character
00007b 2df6                      	MOV ZH, R6				; Set z-pointer to TABLEA beginning
00007c 2de5                      	MOV ZL, R5				; Set z-pointer to TABLEA beginning
                                 	; Output coordinates for third character
00007d e830                      	LDI R19, 0x80			; Set the laser offset for the third character
00007e d04e                      	RCALL LASERTESTPATTERN	; Call the laser test pattern subroutine
                                 	; Initialize z-pointer for fourth character
00007f 2df8                      	MOV ZH, R8				; Set z-pointer to TABLEA beginning
000080 2de7                      	MOV ZL, R7				; Set z-pointer to TABLEA beginning
                                 	; Output coordinates for fourth  character
000081 ec30                      	LDI R19, 0xC0			; Set the laser offset for the fourth character
000082 d04a                      	RCALL LASERTESTPATTERN	; Call the laser test pattern subroutine
                                 	; Jump back
000083 cfc9                      	RJMP FINISH				; Jump back to FINISH
                                 
                                 ANIMFINISH:
                                 	; Select PIA
000084 982b                      	CBI PORTB, 3			; Clear PortB, bit 3 to select PIA
000085 982c                      	CBI PORTB, 4			; Clear PortB, bit 4 to select PIA
                                 	;RCALL LASERANIMATION	; Call the Laser Animation subroutine
000086 cfc6                      	RJMP FINISH				; Jump back to FINISH
                                 
                                 ;==================================================================================
                                 ; FUNCTIONS
                                 ;==================================================================================
                                 
                                 OUTCOMM:
000087 9a2b                      	SBI PORTB, 3			; Set PortB, bit 3 to select LCD
000088 9a2c                      	SBI PORTB, 4			; Set PortB, bit 4 to select LCD
000089 9828                      	CBI PORTB, 0			; Select Register 0 of the display 
00008a e010                      	LDI R17, 0x00			; Load 0x00 into R17
00008b b91a                      	OUT DDRD, R17			; Set PIND as input
00008c d00e                      	RCALL CHECKBUSY			; Call the checkbusy routine
00008d ef1f                      	LDI R17, 0xFF			; Load 0xFF into R17
00008e b91a                      	OUT DDRD, R17			; Set PORTD as output
00008f b90b                      	OUT PORTD, R16			; OUTPUT the contents of R16 to PORTD
000090 d029                      	RCALL EXEC				; Call the EXEC subroutine 
000091 9508                      	RET						; Return to the origin of subroutine call
                                 
                                 OUTCHAR:
000092 9a2b                      	SBI PORTB, 3			; Set PortB, bit 3 to select LCD
000093 9a2c                      	SBI PORTB, 4			; Set PortB, bit 4 to select LCD
000094 d006                      	RCALL CHECKBUSY			; Call the CHECKBUSY subroutine
000095 982a                      	CBI PORTB, 2			; Set E = 0
000096 9829                      	CBI PORTB, 1			; Set R/!W = 0
000097 9a28                      	SBI PORTB, 0			; Set RS = 1
000098 b90b                      	OUT PORTD, R16			; Output R16 to PORTD
000099 d020                      	RCALL EXEC				; Call the EXEC subroutine 
00009a 9508                      	RET						; Return to the origin of the subroutine call
                                 
                                 CHECKBUSY:
00009b 9a2b                      	SBI PORTB, 3			; Set PortB, bit 3 to select LCD
00009c 9a2c                      	SBI PORTB, 4			; Set PortB, bit 4 to select LCD
00009d 982a                      	CBI PORTB, 2			; Set E = 0
00009e 9a29                      	SBI PORTB, 1			; Set R/!W = 1
00009f 9828                      	CBI PORTB, 0			; Set RS = 0
0000a0 9a2a                      	SBI PORTB, 2			; Set E = 1
0000a1 d004                      	RCALL DELAY				; Call the DELAY subroutine
0000a2 982a                      	CBI PORTB, 2			; Set E = 0
0000a3 9829                      	CBI PORTB, 1			; Set R/!W = 0
0000a4 9828                      	CBI PORTB, 0			; Set RS = 0
0000a5 9508                      	RET						; Return to origin of subroutine call
                                 
                                 DELAY:
0000a6 e071                      	LDI R23, 1				; Load 1 into R23
0000a7 ef6f                      LP3:LDI R22, 255			; Load 255 into R22
0000a8 ef5f                      LP2:LDI R21, 255			; Load 255 into R21
0000a9 955a                      LP1:DEC R21					; Decrement R21
0000aa f7f1                      	BRNE LP1				; Branch to LP1 if R21 != 0
0000ab 956a                      	DEC R22					; Decrement R22
0000ac f7d9                      	BRNE LP2				; Branch to LP2 if R22 != 0
0000ad 957a                      	DEC R23					; Decrement R23
0000ae f7c1                      	BRNE LP3				; Branch to LP3 if R23 != 0
0000af 9508                      	RET						; Return to origin of subroutine calls
                                 
                                 LASERDELAY:
0000b0 e072                      	LDI R23, 2				; Load 2 into R23
0000b1 e16b                      LR3:LDI R22, 27				; Load 27 into R22
0000b2 ef5f                      LR2:LDI R21, 255			; Load 255 into R21
0000b3 955a                      LR1:DEC R21					; Decrement R21
0000b4 f7f1                      	BRNE LR1				; Branch to LP1 if R21 != 0
0000b5 956a                      	DEC R22					; Decrement R22
0000b6 f7d9                      	BRNE LR2				; Branch to LP2 if R22 != 0
0000b7 957a                      	DEC R23					; Decrement R23
0000b8 f7c1                      	BRNE LR3				; Branch to LP3 if R23 != 0
0000b9 9508                      	RET						; Return to origin of subroutine calls
                                 
                                 EXEC:
0000ba 9a2a                      	SBI PORTB, 2			; Set E=1
0000bb 0000                      	NOP						; Wait for one cycle
0000bc 0000                      	NOP						; Wait for one cycle
0000bd 0000                      	NOP						; Wait for one cycle
0000be 0000                      	NOP						; Wait for one cycle
0000bf 0000                      	NOP						; Wait for one cycle
0000c0 0000                      	NOP						; Wait for one cycle
0000c1 0000                      	NOP						; Wait for one cycle
0000c2 0000                      	NOP						; Wait for one cycle
0000c3 982a                      	CBI PORTB, 2			; Set E=0
0000c4 0000                      	NOP						; Wait for one cycle
0000c5 0000                      	NOP						; Wait for one cycle
0000c6 0000                      	NOP						; Wait for one cycle
0000c7 0000                      	NOP						; Wait for one cycle
0000c8 0000                      	NOP						; Wait for one cycle
0000c9 0000                      	NOP						; Wait for one cycle
0000ca 0000                      	NOP						; Wait for one cycle
0000cb 0000                      	NOP						; Wait for one cycle
0000cc 9508                      	RET						; Return to origin of subroutine call
                                 	
                                 LASERTESTPATTERN:
                                 	; X-Coordinate
0000cd 95c8                      	LPM						; Load the value pointed to by Z, store it in R0
0000ce 2d00                      	MOV R16, R0				; Load the value for R0 into R16
0000cf 3101                      	CPI R16, 0x11			; Compares the value in R16 to "end of table" code
0000d0 f089                      	BREQ LASERTESTEND		; If end of table, branch to LASERTESTEND
0000d1 0f03                      	ADD R16, R19			; Add the laser offset value to the x-coordinate
0000d2 9828                      	CBI PORTB, 0			; Selects Data Registers
0000d3 9829                      	CBI PORTB, 1			; Selects DRA
0000d4 b90b                      	OUT PORTD, R16			; Writes the data to DRA of the PIA
0000d5 dfe4                      	RCALL EXEC				; Executes Instruction 
0000d6 95e3                      	INC ZL					; Increments the z-pointer to the next point in the table
                                 	; Y-Coordinate
0000d7 95c8                      	LPM						; Load the value pointed to by Z, store it in R0
0000d8 2d00                      	MOV R16, R0				; Load the value for R0 into R16
0000d9 3101                      	CPI R16, 0x11			; Compares the value in R16 to "end of table" code
0000da f039                      	BREQ LASERTESTEND		; If end of table, branch to LASERTESTEND
0000db 9828                      	CBI PORTB, 0			; Selects Data Registers
0000dc 9a29                      	SBI PORTB, 1			; Selects DRB
0000dd b90b                      	OUT PORTD, R16			; Writes the data to DRB of the PIA
0000de dfdb                      	RCALL EXEC				; Execute Instruction	
0000df 95e3                      	INC ZL
0000e0 dfcf                      	RCALL LASERDELAY		; Delay so the mirrors of the laser can catch up
0000e1 cfeb                      	RJMP LASERTESTPATTERN	; Jump back to LASERTESTPATTERN	
                                 LASERTESTEND:
0000e2 9508                      	RET						; Return to where it was called
                                 	
                                 PCINT:
0000e3 9590                      	COM R25					; Complement the redundancy register
0000e4 ff90                      	SBRS R25, 0				; Skip next line if R25 bit 0 is set
0000e5 9518                      	RETI					; Return from interrupt
0000e6 b106                      	IN R16, PINC			; Put data from PINC into R16
0000e7 710f                      	ANDI R16, 0x1F			; AND R16 with 0x1F
0000e8 3103                      	CPI R16, 0x13			; Compare R16 with the hex value for the "mode" key
0000e9 f0c9                      	BREQ MODE				; If R16 = Mode, branch to MODE routine
0000ea 30a0                      	CPI R26, 0				; Compare MODE register to 0
0000eb f4e9                      	BRNE DUMBRET			; Branch to DUMBRET if MODE != 0			
0000ec 3102                      	CPI R16, 0x12			; Compare R16 with the hex value for the "shift" key
0000ed f099                      	BREQ SHIFT				; If R16 = Shift, branch to SHIFT routine
0000ee c000                      	RJMP CHARSELECT			; Jump to CHARSELECT
                                 
                                 CHARSELECT:
0000ef 3f8f                      	CPI R24, 0xFF			; Compare Shift Register to 0xFF
0000f0 f041                      	BREQ SHIFTSELECT		; If Shift Register = 0xFF, branch to SHIFTSELECT
0000f1 e2f0                      	LDI ZH, high(CHARTABLE*2)	; Set Z-pointer to CHARTABLE beginning
0000f2 e0e0                      	LDI ZL, low(CHARTABLE*2)	; Set Z-pointer to CHARTABLE beginning
0000f3 0fe0                      	ADD ZL, R16				; ADD R16 value to low z-pointer
0000f4 0fe0                      	ADD ZL, R16				; ADD R16 value to low z-pointer again
0000f5 95c8                      	LPM						; Load the value pointed to by Z, store it in R0
0000f6 2d00                      	MOV R16, R0				; Load the value for R0 into R16
0000f7 df9a                      	RCALL OUTCHAR			; Call the OUTCHAR subroutine to output this character to the display
0000f8 9518                      	RETI					; Return from the interrupt
                                 
                                 SHIFTSELECT:
0000f9 e2f2                      	LDI ZH, high(SHIFTTABLE*2)	; Set Z-pointer to CHARTABLE beginning
0000fa e0e0                      	LDI ZL, low(SHIFTTABLE*2)	; Set Z-pointer to CHARTABLE beginning
0000fb 0fe0                      	ADD ZL, R16				; ADD R16 value to low z-pointer
0000fc 0fe0                      	ADD ZL, R16				; ADD R16 value to low z-pointer again
0000fd 95c8                      	LPM						; Load the value pointed to by Z, store it in R0
0000fe 2d00                      	MOV R16, R0				; Load the value for R0 into R16
0000ff df92                      	RCALL OUTCHAR			; Call the OUTCHAR subroutine to output this character to the display
000100 9518                      	RETI					; Return from the interrupt
                                 
                                 SHIFT:
000101 9580                      	COM R24					; Complement the R1 (shift) register
000102 9518                      	RETI					; Return from the interrupt
                                 
                                 MODE:
000103 30a3                      	CPI R26, 3				; Compare R26 to 3
000104 f011                      	BREQ RESETMODE			; Branch to RESETMODE if MODE = 3
000105 95a3                      	INC R26					; Increment the MODE register
000106 9518                      	RETI					; Return from the interrupt
                                 
                                 RESETMODE:
000107 27aa                      	CLR R26					; Clear the MODE register
000108 9518                      	RETI					; Return from the interrupt
                                 
                                 DUMBRET:
000109 9518                      	RETI					; Return from the interrupt
                                 
                                 ;===================================================================================================
                                 ;TABLES
                                 ;===================================================================================================
                                 
                                 .org 0x1000					; Set origin to FLASH 0x1000
                                 CHARTABLE:
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(371): warning: .cseg .db misalignment - padding zero byte
001000 0041                          .db 'A'					; Store value for 'A'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(372): warning: .cseg .db misalignment - padding zero byte
001001 0042                          .db 'B'					; Store value for 'B'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(373): warning: .cseg .db misalignment - padding zero byte
001002 0043                          .db 'C'					; Store value for 'C'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(374): warning: .cseg .db misalignment - padding zero byte
001003 0044                          .db 'D'					; Store value for 'D'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(375): warning: .cseg .db misalignment - padding zero byte
001004 0045                          .db 'E'					; Store value for 'E'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(376): warning: .cseg .db misalignment - padding zero byte
001005 0046                          .db 'F'					; Store value for 'F'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(377): warning: .cseg .db misalignment - padding zero byte
001006 0047                          .db 'G'					; Store value for 'G'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(378): warning: .cseg .db misalignment - padding zero byte
001007 0048                          .db 'H'					; Store value for 'H'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(379): warning: .cseg .db misalignment - padding zero byte
001008 0049                          .db 'I'					; Store value for 'I'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(380): warning: .cseg .db misalignment - padding zero byte
001009 004a                          .db 'J'					; Store value for 'J'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(381): warning: .cseg .db misalignment - padding zero byte
00100a 004b                          .db 'K'					; Store value for 'K'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(382): warning: .cseg .db misalignment - padding zero byte
00100b 004c                          .db 'L'					; Store value for 'L'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(383): warning: .cseg .db misalignment - padding zero byte
00100c 004d                          .db 'M'					; Store value for 'M'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(384): warning: .cseg .db misalignment - padding zero byte
00100d 004e                          .db 'N'					; Store value for 'N'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(385): warning: .cseg .db misalignment - padding zero byte
00100e 004f                          .db 'O'					; Store value for 'O'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(386): warning: .cseg .db misalignment - padding zero byte
00100f 0050                          .db 'P'					; Store value for 'P'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(387): warning: .cseg .db misalignment - padding zero byte
001010 0051                          .db 'Q'					; Store value for 'Q'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(388): warning: .cseg .db misalignment - padding zero byte
001011 0052                          .db 'R'					; Store value for 'R'
001012 9508                          RET					    ; Return to origin of subroutine call
                                 
                                 .org 0x1100                  ; Set origin to FLASH 0x1100
                                 SHIFTTABLE:
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(393): warning: .cseg .db misalignment - padding zero byte
001100 0053                          .db 'S'					; Store value for 'S'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(394): warning: .cseg .db misalignment - padding zero byte
001101 0054                          .db 'T'					; Store value for 'T'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(395): warning: .cseg .db misalignment - padding zero byte
001102 0055                          .db 'U'					; Store value for 'U'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(396): warning: .cseg .db misalignment - padding zero byte
001103 0056                          .db 'V'					; Store value for 'V'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(397): warning: .cseg .db misalignment - padding zero byte
001104 0057                          .db 'W'					; Store value for 'W'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(398): warning: .cseg .db misalignment - padding zero byte
001105 0058                          .db 'X'					; Store value for 'X'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(399): warning: .cseg .db misalignment - padding zero byte
001106 0059                          .db 'Y'					; Store value for 'Y'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(400): warning: .cseg .db misalignment - padding zero byte
001107 005a                          .db 'Z'					; Store value for 'Z'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(401): warning: .cseg .db misalignment - padding zero byte
001108 0030                          .db '0'					; Store value for '0'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(402): warning: .cseg .db misalignment - padding zero byte
001109 0031                          .db '1'					; Store value for '1'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(403): warning: .cseg .db misalignment - padding zero byte
00110a 0032                          .db '2'					; Store value for '2'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(404): warning: .cseg .db misalignment - padding zero byte
00110b 0033                          .db '3'					; Store value for '3'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(405): warning: .cseg .db misalignment - padding zero byte
00110c 0034                          .db '4'					; Store value for '4'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(406): warning: .cseg .db misalignment - padding zero byte
00110d 0035                          .db '5'					; Store value for '5'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(407): warning: .cseg .db misalignment - padding zero byte
00110e 0036                          .db '6'					; Store value for '6'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(408): warning: .cseg .db misalignment - padding zero byte
00110f 0037                          .db '7'					; Store value for '7'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(409): warning: .cseg .db misalignment - padding zero byte
001110 0038                          .db '8'					; Store value for '8'
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(410): warning: .cseg .db misalignment - padding zero byte
001111 0039                          .db '9'					; Store value for '9'
001112 9508                          RET						; Return to origin of subroutine call
                                 
                                 .org 0x1200
                                 TABLEA:
001200 4002
001201 c01e
001202 403d
001203 ff00
001204 8210
001205 822d
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(415): warning: .cseg .db misalignment - padding zero byte
001206 0011                      	.db 0x02, 0x40, 0x1E, 0xC0, 0x3D, 0x40, 0x00, 0xFF, 0x10, 0x82, 0x2D, 0x82, 0x11
                                 .org 0x1240
                                 TABLEB:
001240 4002
001241 c002
001242 c028
001243 aa3d
001244 963d
001245 8228
001246 8202
001247 8228
001248 6e3d
001249 503d
00124a 4028
00124b 4002
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(418): warning: .cseg .db misalignment - padding zero byte
00124c 0011                      	.db 0x02, 0x40, 0x02, 0xC0, 0x28, 0xC0, 0x3D, 0xAA, 0x3D, 0x96, 0x28, 0x82, 0x02, 0x82, 0x28, 0x82, 0x3D, 0x6E, 0x3D, 0x50, 0x28, 0x40, 0x02, 0x40, 0x11
                                 .org 0x1280
                                 TABLEC:
001280 a03d
001281 c01d
001282 a002
001283 5802
001284 401f
001285 583d
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(421): warning: .cseg .db misalignment - padding zero byte
001286 0011                      	.db 0x3D, 0xA0, 0x1D, 0xC0, 0x02, 0xA0, 0x02, 0x58, 0x1F, 0x40, 0x3D, 0x58, 0x11
                                 .org 0x12C0
                                 TABLED:
0012c0 4002
0012c1 c102
0012c2 c028
0012c3 963d
0012c4 6e3d
0012c5 4028
0012c6 4002
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(424): warning: .cseg .db misalignment - padding zero byte
0012c7 0011                      	.db 0x02, 0x40, 0x02, 0xC1, 0x28, 0xC0, 0x3D, 0x96, 0x3D, 0x6E, 0x28, 0x40, 0x02, 0x40, 0x11
                                 .org 0x1300
                                 TABLEE:
001300 c03d
001301 c002
001302 4002
001303 403d
001304 4002
001305 8202
001306 8228
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(427): warning: .cseg .db misalignment - padding zero byte
001307 0011                      	.db 0x3D, 0xC0, 0x02, 0xC0, 0x02, 0x40, 0x3D, 0x40, 0x02, 0x40, 0x02, 0x82, 0x28, 0x82, 0x11
                                 .org 0x1340
                                 TABLEF:
001340 c03d
001341 c002
001342 4002
001343 8202
001344 8228
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(430): warning: .cseg .db misalignment - padding zero byte
001345 0011                      	.db 0x3D, 0xC0, 0x02, 0xC0, 0x02, 0x40, 0x02, 0x82, 0x28, 0x82, 0x11
                                 .org 0x1480
                                 TABLEG:
001480 a43e
001481 bf33
001482 c00d
001483 a302
001484 5a02
001485 410d
001486 4132
001487 583e
001488 7c3e
001489 7b24
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(433): warning: .cseg .db misalignment - padding zero byte
00148a 0011                      	.db 0x3E, 0xA4, 0x33, 0xBF, 0x0D, 0xC0, 0x02, 0xA3, 0x02, 0x5A, 0x0D, 0x41, 0x32, 0x41, 0x3E, 0x58, 0x3E, 0x7C, 0x24, 0x7B, 0x11
                                 .org 0x14C0
                                 TABLEH:
0014c0 c002
0014c1 4102
0014c2 8202
0014c3 823e
0014c4 c03e
0014c5 403e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(436): warning: .cseg .db misalignment - padding zero byte
0014c6 0011                      	.db 0x02, 0xC0, 0x02, 0x41, 0x02, 0x82, 0x3E, 0x82, 0x3E, 0xC0, 0x3E, 0x40, 0x11
                                 .org 0x1500
                                 TABLEI:
001500 c002
001501 c03e
001502 c01f
001503 401f
001504 4002
001505 403e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(439): warning: .cseg .db misalignment - padding zero byte
001506 0011                      	.db 0x02, 0xC0, 0x3E, 0xC0, 0x1F, 0xC0, 0x1F, 0x40, 0x02, 0x40, 0x3E, 0x40, 0x11
                                 .org 0x1540
                                 TABLEJ:
001540 c03e
001541 6f3e
001542 4021
001543 6f02
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(442): warning: .cseg .db misalignment - padding zero byte
001544 0011                      	.db 0x3E, 0xC0, 0x3E, 0x6F, 0x21, 0x40, 0x02, 0x6F, 0x11
                                 .org 0x1580
                                 TABLEK:
001580 c002
001581 8202
001582 c03e
001583 8202
001584 403e
001585 8202
001586 4002
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(445): warning: .cseg .db misalignment - padding zero byte
001587 0011                      	.db 0x02, 0xC0, 0x02, 0x82, 0x3E, 0xC0, 0x02, 0x82, 0x3E, 0x40, 0x02, 0x82, 0x02, 0x40, 0x11
                                 .org 0x15C0
                                 TABLEL:
0015c0 c002
0015c1 4002
0015c2 403e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(448): warning: .cseg .db misalignment - padding zero byte
0015c3 0011                      	.db 0x02, 0xC0, 0x02, 0x40, 0x3E, 0x40, 0x11
                                 .org 0x1600
                                 TABLEM:
001600 4002
001601 c011
001602 4020
001603 bf2e
001604 403e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(451): warning: .cseg .db misalignment - padding zero byte
001605 0011                      	.db 0x02, 0x40, 0x11, 0xC0, 0x20, 0x40, 0x2E, 0xBF, 0x3E, 0x40, 0x11
                                 .org 0x1640
                                 TABLEN:
001640 4002
001641 c002
001642 403e
001643 c03e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(454): warning: .cseg .db misalignment - padding zero byte
001644 0011                      	.db 0x02, 0x40, 0x02, 0xC0, 0x3E, 0x40, 0x3E, 0xC0, 0x11
                                 .org 0x1680
                                 TABLEO:
001680 c014
001681 a002
001682 5c02
001683 4014
001684 4029
001685 5b3e
001686 a03e
001687 c029
001688 c014
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(457): warning: .cseg .db misalignment - padding zero byte
001689 0011                      	.db 0x14, 0xC0, 0x02, 0xA0, 0x02, 0x5C, 0x14, 0x40, 0x29, 0x40, 0x3E, 0x5B, 0x3E, 0xA0, 0x29, 0xC0, 0x14, 0xC0, 0x11
                                 .org 0x16C0
                                 TABLEP:
0016c0 4002
0016c1 c002
0016c2 c03e
0016c3 823e
0016c4 8202
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(460): warning: .cseg .db misalignment - padding zero byte
0016c5 0011                      	.db 0x02, 0x40, 0x02, 0xC0, 0x3E, 0xC0, 0x3E, 0x82, 0x02, 0x82, 0x11
                                 .org 0x1700
                                 TABLEQ:
001700 c014
001701 a002
001702 5c02
001703 4014
001704 4029
001705 5b3e
001706 a03e
001707 c029
001708 c014
001709 ff00
00170a 5a28
00170b 403e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(463): warning: .cseg .db misalignment - padding zero byte
00170c 0011                      	.db 0x14, 0xC0, 0x02, 0xA0, 0x02, 0x5C, 0x14, 0x40, 0x29, 0x40, 0x3E, 0x5B, 0x3E, 0xA0, 0x29, 0xC0, 0x14, 0xC0, 0x00, 0xFF, 0x28, 0x5A, 0x3E, 0x40, 0x11
                                 .org 0x1740
                                 TABLER:
001740 4002
001741 c002
001742 c03e
001743 823e
001744 8202
001745 403e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(466): warning: .cseg .db misalignment - padding zero byte
001746 0011                      	.db 0x02, 0x40, 0x02, 0xC0, 0x3E, 0xC0, 0x3E, 0x82, 0x02, 0x82, 0x3E, 0x40, 0x11
                                 .org 0x1780
                                 TABLES:
001780 c03e
001781 c002
001782 8202
001783 823e
001784 403e
001785 4002
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(469): warning: .cseg .db misalignment - padding zero byte
001786 0011                      	.db 0x3E, 0xC0, 0x02, 0xC0, 0x02, 0x82, 0x3E, 0x82, 0x3E, 0x40, 0x02, 0x40, 0x11
                                 .org 0x17C0
                                 TABLET:
0017c0 4021
0017c1 c021
0017c2 c002
0017c3 c03e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(472): warning: .cseg .db misalignment - padding zero byte
0017c4 0011                      	.db 0x21, 0x40, 0x21, 0xC0, 0x02, 0xC0, 0x3E, 0xC0, 0x11
                                 .org 0x1800
                                 TABLEU:
001800 c002
001801 4002
001802 403e
001803 c03e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(475): warning: .cseg .db misalignment - padding zero byte
001804 0011                      	.db 0x02, 0xC0, 0x02, 0x40, 0x3E, 0x40, 0x3E, 0xC0, 0x11
                                 .org 0x1840
                                 TABLEV:
001840 c002
001841 4020
001842 c03e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(478): warning: .cseg .db misalignment - padding zero byte
001843 0011                      	.db 0x02, 0xC0, 0x20, 0x40, 0x3E, 0xC0, 0x11
                                 .org 0x1880
                                 TABLEW:
001880 c002
001881 4014
001882 9b21
001883 402d
001884 c03e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(481): warning: .cseg .db misalignment - padding zero byte
001885 0011                      	.db 0x02, 0xC0, 0x14, 0x40, 0x21, 0x9B, 0x2D, 0x40, 0x3E, 0xC0, 0x11
                                 .org 0x18C0
                                 TABLEX:
0018c0 c002
0018c1 403e
0018c2 ff00
0018c3 4002
0018c4 c03e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(484): warning: .cseg .db misalignment - padding zero byte
0018c5 0011                      	.db 0x02, 0xC0, 0x3E, 0x40, 0x00, 0xFF, 0x02, 0x40, 0x3E, 0xC0, 0x11
                                 .org 0x1900
                                 TABLEY:
001900 c002
001901 8220
001902 4020
001903 8220
001904 c03e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(487): warning: .cseg .db misalignment - padding zero byte
001905 0011                      	.db 0x02, 0xC0, 0x20, 0x82, 0x20, 0x40, 0x20, 0x82, 0x3E, 0xC0, 0x11
                                 .org 0x1940
                                 TABLEZ:
001940 c002
001941 c03e
001942 4002
001943 403e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(490): warning: .cseg .db misalignment - padding zero byte
001944 0011                      	.db 0x02, 0xC0, 0x3E, 0xC0, 0x02, 0x40, 0x3E, 0x40, 0x11
                                 .org 0x1980
                                 TABLE0:
001980 c014
001981 a002
001982 5c02
001983 4014
001984 4029
001985 5b3e
001986 a03e
001987 c029
001988 c014
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(493): warning: .cseg .db misalignment - padding zero byte
001989 0011                      	.db 0x14, 0xC0, 0x02, 0xA0, 0x02, 0x5C, 0x14, 0x40, 0x29, 0x40, 0x3E, 0x5B, 0x3E, 0xA0, 0x29, 0xC0, 0x14, 0xC0, 0x11
                                 .org 0x19C0
                                 TABLE1:
0019c0 c01f
0019c1 401f
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(496): warning: .cseg .db misalignment - padding zero byte
0019c2 0011                      	.db 0x1F, 0xC0, 0x1F, 0x40, 0x11
                                 .org 0x2000
                                 TABLE2:
002000 c002
002001 c03e
002002 823e
002003 8202
002004 4002
002005 403e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(499): warning: .cseg .db misalignment - padding zero byte
002006 0011                      	.db 0x02, 0xC0, 0x3E, 0xC0, 0x3E, 0x82, 0x02, 0x82, 0x02, 0x40, 0x3E, 0x40, 0x11
                                 .org 0x2040
                                 TABLE3:
002040 c002
002041 c03e
002042 823e
002043 8214
002044 823e
002045 403e
002046 4002
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(502): warning: .cseg .db misalignment - padding zero byte
002047 0011                      	.db 0x02, 0xC0, 0x3E, 0xC0, 0x3E, 0x82, 0x14, 0x82, 0x3E, 0x82, 0x3E, 0x40, 0x02, 0x40, 0x11
                                 .org 0x2080
                                 TABLE4:
002080 6e3e
002081 6e02
002082 c036
002083 4036
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(505): warning: .cseg .db misalignment - padding zero byte
002084 0011                      	.db 0x3E, 0x6E, 0x02, 0x6E, 0x36, 0xC0, 0x36, 0x40, 0x11
                                 .org 0x20C0
                                 TABLE5:
0020c0 c03e
0020c1 c002
0020c2 8902
0020c3 893e
0020c4 5d3e
0020c5 4031
0020c6 4011
0020c7 5c02
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(508): warning: .cseg .db misalignment - padding zero byte
0020c8 0011                      	.db 0x3E, 0xC0, 0x02, 0xC0, 0x02, 0x89, 0x3E, 0x89, 0x3E, 0x5D, 0x31, 0x40, 0x11, 0x40, 0x02, 0x5C, 0x11
                                 .org 0x2100
                                 TABLE6:
002100 c03e
002101 c002
002102 4002
002103 403e
002104 823e
002105 8202
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(511): warning: .cseg .db misalignment - padding zero byte
002106 0011                      	.db 0x3E, 0xC0, 0x02, 0xC0, 0x02, 0x40, 0x3E, 0x40, 0x3E, 0x82, 0x02, 0x82, 0x11
                                 .org 0x2140
                                 TABLE7:
002140 c002
002141 c03e
002142 4002
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(514): warning: .cseg .db misalignment - padding zero byte
002143 0011                      	.db 0x02, 0xC0, 0x3E, 0xC0, 0x02, 0x40, 0x11
                                 .org 0x2180
                                 TABLE8:
002180 8202
002181 5702
002182 400f
002183 4032
002184 583e
002185 aa3e
002186 c033
002187 c00f
002188 aa02
002189 8202
00218a 823e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(517): warning: .cseg .db misalignment - padding zero byte
00218b 0011                      	.db 0x02, 0x82, 0x02, 0x57, 0x0F, 0x40, 0x32, 0x40, 0x3E, 0x58, 0x3E, 0xAA, 0x33, 0xC0, 0x0F, 0xC0, 0x02, 0xAA, 0x02, 0x82, 0x3E, 0x82, 0x11
                                 .org 0x21C0
                                 TABLE9:
0021c0 403e
0021c1 c03e
0021c2 c002
0021c3 8202
0021c4 823e
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(520): warning: .cseg .db misalignment - padding zero byte
0021c5 0011                      	.db 0x3E, 0x40, 0x3E, 0xC0, 0x02, 0xC0, 0x02, 0x82, 0x3E, 0x82, 0x11
                                 .org 0x2200
                                 TABLESTAR: ; Character table for the test pattern (square for now)
002200 0000
002201 ff00
002202 ffff
002203 00ff
002204 0000
C:\Users\Morgan Walkup\Documents\GitHub\ComputerSystems\CSMilestone2\CSMilestone2\main.asm(523): warning: .cseg .db misalignment - padding zero byte


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   4 r1 :   3 r2 :   3 r3 :   3 r4 :   3 
r5 :   3 r6 :   3 r7 :   3 r8 :   3 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  26 r17:  13 r18:  12 r19:  24 r20:   0 
r21:   4 r22:   4 r23:   4 r24:   3 r25:   2 r26:   9 r27:   0 r28:   0 
r29:   0 r30:  13 r31:   7 
Registers used: 21 out of 35 (60.0%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   5 adiw  :   0 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  10 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   7 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  24 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  15 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   0 cpc   :   0 
cpi   :  11 cpse  :   0 dec   :   6 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   3 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  42 lds   :   0 lpm   :  12 lsl   :   0 
lsr   :   0 mov   :  20 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  16 or    :   0 ori   :   0 out   :  15 pop   :   0 
push  :   0 rcall :  28 ret   :   9 reti  :   7 rjmp  :  16 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  20 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   2 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 24 out of 113 (21.2%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00440c    536    590   1126   32768   3.4%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 73 warnings
